http://svn.php.net/repository/php/
1、PHP生命周期：
     https://www.cnblogs.com/sweet521/p/6781249.html

  第一步:启动Apache后，PHP解释程序也随之启动(各个扩展、函数、类库切换到可用状态)

  第二步:当一个页面请求发生时，SAPI层（服务器应用程序编程接口）将控制权交给PHP层。设置回复本次请求的环境变量，建立变量表，再调  用各模块的RINIT就是初始化各模块。启动ZEND引擎等

  第三步：执行所有__destruct(),注销开启的函数，关闭ZEND引擎等，然后返回数据

  注：单进程的周期是这样，多程序就多个这周期 


  ZEND引擎与PHP内核：
  PHP是使用ZEND这个内核来构建PHP语言的，所以它是内核中的核心，扩展都要基于ZEND的API，以至开发PHP的人员都说“这两者太高耦合”了，希望把耦合解开。

2、SAPI：

  每一个对服务器进行的访问都是通过SAPI进行的。
  APACEH 的 SAPI与IIS CGI/CLI的SAPI不一样，有的时候CLI会使用到C语言的库函数，APACHE不会，APACHE自己有（如flush、send_header等）
  主要有CGI（IIS的ISAPI，已经很少用）、fast-cgi（比如PHP-FPM）、CLI（比如workerman、swoole）
  既是上层如apache\nginx对PHP实现的CGI/CLI和Apache的mod_php的调用，而CGI/CLI这些都是统一接口的

3、APACHE服务

  APACHE 通过模块加载方式与PHP、PERL、PYTHON等语言集成。

  这里就设计到动态语言与静态语言的概念，PHP之所以是动态语言就因为APACHE在启动服务时就已经编译好与PHP集成，静态当然是代码写好了  再进行编译的。但是APACHE有处理动态链接库的模块mod_so，所以它必须是和APACHE一同启动的。

4、cgi、sapi、fastcgi、php-cgi和php-fpm

  首先，CGI是干嘛的？CGI是为了保证web server传递过来的数据是标准格式的，方便CGI程序的编写者。

  web server（比如说nginx）只是内容的分发者。比如，如果请求/index.html，那么web server会去文件系统中找到这个文件，发送给浏览器，这里分发的是静态数据。好了，如果现在请求的是/index.php，根据配置文件，nginx知道这个不是静态文件，需要去找PHP解析器来处理，那么他会把这个请求简单处理后交给PHP解析器。Nginx会传哪些数据给PHP解析器呢？url要有吧，查询字符串也得有吧，POST数据也要有，HTTP header不能少吧，好的，CGI就是规定要传哪些数据、以什么样的格式传递给后方处理这个请求的协议。仔细想想，你在PHP代码中使用的用户从哪里来的。

  当web server收到/index.php这个请求后，会启动对应的CGI程序，这里就是PHP的解析器。接下来PHP解析器会解析php.ini文件，初始化执行环境，然后处理请求，再以规定CGI规定的格式返回处理后的结果，退出进程。web server再把结果返回给浏览器。

好了，CGI是个协议，跟进程什么的没关系。那fastcgi又是什么呢？Fastcgi是用来提高CGI程序性能的。

  提高性能，那么CGI程序的性能问题在哪呢？"PHP解析器会解析php.ini文件，初始化执行环境"，就是这里了。标准的CGI对每个请求都会执行这些步骤（不闲累啊！启动进程很累的说！），所以处理每个时间的时间会比较长。这明显不合理嘛！那么Fastcgi是怎么做的呢？首先，Fastcgi会先启一个master，解析配置文件，初始化执行环境，然后再启动多个worker。当请求过来时，master会传递给一个worker，然后立即可以接受下一个请求。这样就避免了重复的劳动，效率自然是高。而且当worker不够用时，master可以根据配置预先启动几个worker等着；当然空闲worker太多时，也会停掉一些，这样就提高了性能，也节约了资源。这就是fastcgi的对进程的管理。

  那PHP-FPM又是什么呢？是一个实现了Fastcgi的程序，被PHP官方收了。

  大家都知道，PHP的解释器是php-cgi。php-cgi只是个CGI程序，他自己本身只能解析请求，返回结果，不会进程管理（皇上，臣妾真的做不到啊！）所以就出现了一些能够调度php-cgi进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。好了PHP-FPM也是这么个东东，在长时间的发展后，逐渐得到了大家的认可（要知道，前几年大家可是抱怨PHP-FPM稳定性太差的），也越来越流行。
============================================================================================
  比喻：

  你(PHP)去和爱斯基摩人(web服务器，如 Apache、Nginx)谈生意

  你说中文(PHP代码)，他说爱斯基摩语(C代码)，互相听不懂，怎么办？那就都把各自说的话转换成英语(FastCGI 协议)吧。

  怎么转换呢？你就要使用一个翻译机(PHP-FPM)
  (当然对方也有一个翻译机，那个是他自带的)

  我们这个翻译机是最新型的，老式的那个（PHP-CGI）被淘汰了。不过它(PHP-FPM)只有年轻人（Linux系统）会用，老头子们（Windows系统）不会摆弄它，只好继续用老式的那个。

  总结：
      sapi    : 服务端应用编程接口
      cgi     : web server通信的协议格式
      php-cli : PHP命令行协议格式
      fastcgi : APACHE、NGINX使用的一种CGI，提高CGI性能的
      php-cgi : 5.3之前的进程解释、管理器     //在WINDOWS平台上使用的实现fastcgi格式的程序(该内容作废)
      php-fpm : 5.3后出现的进程解释、管理器  //在LINUX平台上使用的实现fastcgi格式的程序,当然比php-cgi先进(该内容作废)


5、fpm：
  master负责创建并监听(listen)网络连接，worker负责接受(accept)网络连接.
  master进程与worker进程之间，通过信号(signals)和管道(pipe)通信．
  master是基于epoll的事件循环，worker则是同步阻塞的工作模式

6、多进程与多线程模式
    php都支持，默认情况下apache的prefork和event mpm模式支持的是多进程+多线程（worker进程中有多个线程，一个线程挂后不影响其他worker）
    nginx是多进程模型fastcgi\php-fpm，并发好于apache是因为nginx更加轻量，且非线程安全版本的PHP并发高于线程安全版本

7、生命周期：
     minit rinit rshutdown mshutdown
     整个sapi即php进程周期会全部执行，一个php请求只执行中间两个

8、HashTable
     PHP的变量作用域、函数表、类的属性、方法等，Zend引擎内部很多数据都是它实现的
     通过哈希函数计算出槽位来存储。如果槽位上有数据了，则哈希表退化为链表，使用pNext和pLast指针来记录槽位所在的链表关系
     但会预先分配内存，如果不是进行随机查找，则哈希表有点浪费，php很多地方也使用了双向链表

