多进程用（pcntl扩展）
  子进程   ：pcntl_fork出的进程
  孤儿进程：父进程挂后被系统ini=1接收的进程
  僵尸进程：子进程退出后未回收的进程
  信号      ：子进程的退出等发送给父进程的信息，如SIGTERM、SIGHUP、SIGCHLD等      
  ipc通信  ：pipe管道、共享内存、信号量、消息队列、socket
                  管道就是posix扩展使用posix_mkfifo开启的可以fopen读写的文件
                  共享内存和信号量一起使用，在PHP中他们的扩展是Semaphore
进程daemon
  进程组   ：许多进程组成，有组长、组员，组长ID是组ID
  会话      ：组长进程不能setsid()一个会话，可以让子进程setsid
  控制终端：如果控制终端的进程退出后则不可以控制了，达到daemon
  chdir()   ：调整工作目录的输出，就可以不用输出到终端上了

进程平滑操作
  接收到信号后延迟处理，达到平滑目的

通信用socket扩展
  workerman框架等
  多路复用用libevent/event扩展

IO多路复用（PHP为例）：
  1、当服务端语言进程如PHP被置于前端直接接收并发时，这时CIL模式下的进程则是用socket操作的多进程模型，为了提高并发，使用IO多路复用
  2、服务端开启socket并监听、接收客户端的请求
  3、服务端进程轮询处理socket事件
  3、以POSIX标准中select为例，socket_select监听内核维护的可读集合，可写集合，异常集合，当集合有事件发生后，就需要将三个集合copy到用户态
  4、最后以轮询的方式取出有事件的FD做处理（如取出数据通知其他进程等 ）
  补：而epoll是使用链表回调式通知调用方，这样1、不用全部FD轮询 2、一个进程打开的FD没有上限3、FD是需要一次copy不用像select全copy
        当然IO多路复用的都不是异步，因为最终还是要有进程/线程同步去处理事件
        主进程接收一个客服端fd，并返回一个链接fd，然后fork一个子进程，再然后关闭链接fd的副本，最后这个客服的请求就交给子进程处理了
  
GatewayWorker进程模型：
  1、基于workerman扩展，Gateway、Worker进程模型
      Register进程提供注册服务       （不存在瓶颈，一台服务既可）
      Gateway进程提供网络IO服务    
      Business进程提供业务处理服务
  2、3种进程可分布式部署在不同机子上，可以随服务需求增减机子  
      底层实现增减服务的注册发现、检测、业务转发
  3、与常用MVC框架接合
       clint直接访问MVC                          （MVC需要常驻，一般框架有command命令模式，选用好协议进行常驻）
       MVC调用GatewayWorker提供的API（当通信到来MVC需要调用GatewayWorker的网络编程功能进行并接合业务处理）
       GatewayWorker回应clint                （MVC业务处理完毕后调用API直接回应给客户端）

Gateway进程模型与Worker进程模式比较：
  Worker简单易用，Gateway扩展性强、相对复杂点，更适用于分布式系统
  worker如PHP-FPM、workerman
  Gateway其实是以workerman为底层，建立在它上的一个多进程框架
