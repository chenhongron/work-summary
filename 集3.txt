1、静态类成员
   静态属性：只被初始化一次，类会保存它的值
   静态方法：里面的静态变量只被初始化一次，方法会保存它的值，只作用于方法内
   不能用this访问，无需实例化；在编译的时候赋值，多次使用可以直接到内存中取，会比动态的快
   接合实例化用更佳，用静态调用去实例化，并只被实例化一次自己多次调用其他属性及方法

2、LNPM负载均衡
   http://www.cnblogs.com/alvin_xp/p/4162249.html  主要讲解MYSQL的主从配制，再把主做从配制就可以实现两个数据库的同步
   nginx proxy_pass模块实现反向代理
   nginx upstream  模块实现负载均衡
   nginx proxy_pass、upstream和mysql主从实现系统负载均衡
   mysql-router      http://www.fblinux.com/?p=922

3、高并发
   当项目遇到高并发时，首先判断是由于计算密集还是IO密集造成的高并发
   计算密集可以使用多线程（如java）
   IO密集可以使用异步IO  （如nodejs、swoole）、goroutine（如GO，PHP的协程用例很少）

4、消息队列MQ
   https://www.jianshu.com/p/79ca08116d57
   什么时候不使用MQ：上游实时关注执行结果
   什么时候使用MQ：常用于异步处理、应用解耦、流量削锋和消息通讯
   常用Redis和RabbitMQ，相对来说redis偏重内存数据库，rabbitMQ是专业的消息队列
   RabbitMQ名词：messege、exchange、binding、queue、channel、publisher、cusumer、connection、broker和Virtual host

5、mysql锁
   加表锁 LOCK TABLES xxx READ; LOCK TABLES xxx WRITE;
   解锁 UNLOCK TABLES;
   加行锁 SELECT ... LOCK IN SHARE MODE; SELECT ... FOR UPDATE;
   行级锁之前需要关闭事物的自动提交，即先执行START TRANSACTION，因insert/update/delete/select for update执行时事物已自动提交

6、常用工具、协议
   curl       开源文件传输工具
   lts        ssl加密传输层安全协议标准
   socket     基于tcp/ip封装的网络通信工具，套节字
   websocket  基于socket实现的WEB通信协议
   ws         websocket协议的标识符，如http://
   wss        加入了lts的websocket协议的标识符
   socket.io  能够在不同浏览器和移动设备上使用的基于nodejs的库（包括websocket的实现，因为websocket只h5上用）

7、AOP
   OOP面向对象程序设计致力对象解耦的方案（控制反转，依赖注入等），但这只能降低耦合度
   用AOP后可以完全解决耦合度问题（AOP是对OOP的一个补充）
   方案：动态的在相关业务点横向切入代码
   方式：静态AOP（程序编译时、执行效率高）、动态AOP（建立代理、不用重新编译）
   框架：GO！AOP
   
8、PHP网络监听方面
   PHP5.4后CLI 加入web server
   主要使用socket构建，如workerman
   https://segmentfault.com/a/1190000003029173

9、消息队列consumer模型
   https://www.jianshu.com/p/b047c7da2a32
   pull：consumer主动去拉消息
   push：borker推送消息给consumer
   long-polling：当消息consumer请求到borker没有消息时，该请求阻塞（在请求超时范围内）然后再返回
   dynamic push/pull：是对long-polling的加强。加入buffer概念，在borker返回消息时缓存在buffer，然后一同返回，避免了consumer的多次请求，网络开销
10、联合索引
  复合索引的结构与电话簿类似，人名由姓和名构成，电话簿首先按姓氏对进行排序，然后按名字对有相同姓氏的人进行排序。
  如果您知道姓，电话簿将非常有用；如果您知道姓和名，电话簿则更为有用，但如果您只知道名不姓，电话簿将没有用处。

11、每种语言都有其特定的使用领域。百分之百肯定金融机构不会使用“非阻塞”语言，即使它们是“超级高速”，
  因为它们需要安全和一致的运行周期。虽然“消息初创公司”可以与go/node一起使用，因为它不适用于重要数据。

12、数据库分区：将表的数据均衡分摊到不同的硬盘，系统或是不同服务器存储介子中，实际上还是一张表

13、领域驱动模型：
  贫血模型model只是实体，没有业务，service全是业务，充血模型model实体有业务，service只是拼凑业务。
  可以看出充血模型更加oop，因为model是一个完整的对象，有属性有方法

14、启动beanstalkd
  nohup beanstalkd -l 127.0.0.1 -p 11300 &
  
15、PHP长连接与连接池
   长连接，每个进程操作数据库后并不关闭连接，下次请求可复用，当进程退出或客户端主动停止后才会关闭
   连接池，原理是连接过多，让部分连接处于等待状态；数据库初始化时建立多个连接，放在“池”中对其管理、复用
   长连接缺点是并发高了后数据库连接过多引起线程切换资源的消耗，并发不高时是很理想的
   如果连接过少就使用连接池，会让维护池的资源白白浪费
   所以要预估数据库的并发，低于数据库并发可以使用长连接，反之考虑使用连接池

   补：长连接会使得数据库事务出现异常。比如，事务执行到一半PHP挂掉后，长连接不被GC释放，事务在数据库中挂起。
         当客户第二次操作时，上一次的事务会在此自动提交（使用了BEGIN；），但只提交了一半，肯定与我们期望不合

16、query函数
   长连接中直接在SQL执行函数（query）使用BEGIN开启事务，后期的session是没有维护的，
   比如脚本执行完事务还挂起，这时第二次运行会形成事务嵌套，上一次事物自动提交了

17、服务器进程数=（核心数*2）+磁盘数
