1、静态类成员
   静态属性：只被初始化一次，类会保存它的值
   静态方法：里面的静态变量只被初始化一次，方法会保存它的值，只作用于方法内
   不能用this访问，无需实例化；在编译的时候赋值，多次使用可以直接到内存中取，会比动态的快
   接合实例化用更佳，用静态调用去实例化，并只被实例化一次自己多次调用其他属性及方法

2、LNPM负载均衡
   http://www.cnblogs.com/alvin_xp/p/4162249.html  主要讲解MYSQL的主从配制，再把主做从配制就可以实现两个数据库的同步
   nginx proxy_pass模块实现反向代理
   nginx upstream  模块实现负载均衡
   nginx proxy_pass、upstream和mysql主从实现系统负载均衡
   mysql-router      http://www.fblinux.com/?p=922

3、高并发
   当项目遇到高并发时，首先判断是由于计算密集还是IO密集造成的高并发
   计算密集可以使用多线程（如java）
   IO密集可以使用异步IO  （如nodejs、swoole）、goroutine（如GO，PHP的协程用例很少）

4、消息队列MQ
   https://www.jianshu.com/p/79ca08116d57
   什么时候不使用MQ：上游实时关注执行结果
   什么时候使用MQ：常用于异步处理、应用解耦、流量削锋和消息通讯
   常用Redis和RabbitMQ，相对来说redis偏重内存数据库，rabbitMQ是专业的消息队列
   RabbitMQ名词：messege、exchange、binding、queue、channel、publisher、cusumer、connection、broker和Virtual host

5、mysql锁
   加表锁 LOCK TABLES xxx READ; LOCK TABLES xxx WRITE;
   解锁 UNLOCK TABLES;
   加行锁 SELECT ... LOCK IN SHARE MODE; SELECT ... FOR UPDATE;
   行级锁之前需要关闭事物的自动提交，即先执行START TRANSACTION，因insert/update/delete/select for update执行时事物已自动提交

6、常用工具、协议
   curl       开源文件传输工具
   lts        ssl加密传输层安全协议标准
   socket     基于tcp/ip封装的网络通信工具，套节字
   websocket  基于socket实现的WEB通信协议
   ws         websocket协议的标识符，如http://
   wss        加入了lts的websocket协议的标识符
   socket.io  能够在不同浏览器和移动设备上使用的基于nodejs的库（包括websocket的实现，因为websocket只h5上用）

7、AOP
   OOP很好的处理了纵向的业务间，但横向的业务间就需要引入AOP，AOP是对OOP的一个补充
   OOP面向对象程序设计致力对象解耦的方案（控制反转，依赖注入等），但这只能降低耦合度
   因为AOP是横向切面开发，所以它可以完全解决耦合度问题，所以那些不存在依赖关系的业务之间可以用aop切面进去（日志、监控等）
   方案：动态的在相关业务点横向切入代码
   方式：静态AOP（程序编译时、执行效率高）、动态AOP（建立代理、不用重新编译）
   框架：GO！AOP
   
8、PHP网络监听方面
   PHP5.4后CLI 加入web server
   主要使用socket构建，如workerman
   https://segmentfault.com/a/1190000003029173

9、消息队列consumer模型
   https://www.jianshu.com/p/b047c7da2a32
   pull：consumer主动去拉消息
   push：borker推送消息给consumer
   long-polling：当消息consumer请求到borker没有消息时，该请求阻塞（在请求超时范围内）然后再返回
   dynamic push/pull：是对long-polling的加强。加入buffer概念，在borker返回消息时缓存在buffer，然后一同返回，
                                  避免了consumer的多次请求，网络开销
10、联合索引
  复合索引的结构与电话簿类似，人名由姓和名构成，电话簿首先按姓氏对进行排序，然后按名字对有相同姓氏的人进行排序。
  如果您知道姓，电话簿将非常有用；如果您知道姓和名，电话簿则更为有用，但如果您只知道名不姓，电话簿将没有用处。

11、每种语言都有其特定的使用领域。百分之百肯定金融机构不会使用“非阻塞”语言，即使它们是“超级高速”，
  因为它们需要安全和一致的运行周期。虽然“消息初创公司”可以与go/node一起使用，因为它不适用于重要数据。

12、数据库分区：将表的数据均衡分摊到不同的硬盘，系统或是不同服务器存储介子中，实际上还是一张表

13、领域驱动模型：
  贫血模型model只是实体，没有业务，service全是业务，充血模型model实体有业务，service只是拼凑业务。
  可以看出充血模型更加oop，因为model是一个完整的对象，有属性有方法
  ddd就是一种围绕领域model驱动设计的架构思想，领域模型有充血和贫血2种；聚合根包含多个实体，一个实体有多个值对象

14、启动beanstalkd
  nohup beanstalkd -l 127.0.0.1 -p 11300 &
  
15、PHP长连接与连接池
    https://wiki.swoole.com/wiki/page/350.html
   长连接，每个进程操作数据库后并不关闭连接，下次请求可复用，当进程退出或客户端主动停止后才会关闭
   连接池，原理是连接过多，让部分连接处于等待状态；数据库初始化时建立多个连接，放在“池”中对其管理、复用
   长连接缺点是并发高了后数据库连接过多引起线程切换资源的消耗，并发不高时是很理想的
   如果连接过少就使用连接池，会让维护池的资源白白浪费
   所以要预估数据库的并发，低于数据库并发可以使用长连接，反之考虑使用连接池

   补：长连接会使得数据库事务出现异常。比如，事务执行到一半PHP挂掉后，长连接不被GC释放，事务在数据库中挂起。
         当客户第二次操作时，上一次的事务会在此自动提交（使用了BEGIN；），但只提交了一半，肯定与我们期望不合
       （连接关闭后进程会清理，这条作废）
         连接池要在超大型应用才有效（10000以上连接，100以上台应用服务器），普通应用用长连接就可以，每个worker一个长连接

16、query函数
   长连接中直接在SQL执行函数（query）使用BEGIN开启事务，后期的session是没有维护的，
   比如脚本执行完事务还挂起，这时第二次运行会形成事务嵌套，上一次事物自动提交了

17、服务器进程数=（核心数*2）+磁盘数

18、两种ORM
   active record：  'model'层直接对应数据表，'modle'类与数据表关系紧。更容易oop开发模式，易写出充血模型
   data mapper：  在访问类与数据表中间加了一层manage管理mapping映射到表，分离达到低耦合。
                           有entity实体、reprostory仓库，分层等。易写出贫血模型
 Data Mappers带来的好处主要体现在后期，比如需要优化性能，我们可以将一次请求中的所有SQL批量执行，这些SQL统一放在全
 局持久化对象中，很方便就能实现批量处理操作。这在ActiveRecord中很难做到。拿到持久化对象之后对数据的干预也会非常方便，
 例如MySQL表中的字段类型从枚举变成了int，在ActiveRecord中你需要查找所有代码，将该字段修正。而Data Mappers只需要在持久化对象中做个替换。

19、facade分层与ORM
   当业务复杂后ORM中类开始膨胀，这个时候抽象一层业务service层，把active record中modle业务或data mapping中controller业务重构到业务层
   （modle是充血模型，不易把业务拆分到service层，但这个时候利大于弊）
   当service层的业务也逐渐膨胀的时候，可以抽出子系统的facade，处理不同service层调用顺序（其实controller也是一种facade）
   facade与服务容器结合使用最好，让facade去容器中找

20、php master与worker进程
   nginx和PHP的进程管理是相似的，皆master、worker使用epoll处理请求。不同的在于，php worker则是同步阻塞的工作模式
   master是基于epoll的事件循环，worker则是同步阻塞的工作模式

21、swoole与workerman
   swoole不支持多线程不能发挥出多核的性能；不过使用协程可以使用同步的方式写异步代码
   workerman是PHP fpm生态下产物，对corder更加友好；不会像swoole不可以使用全局变量，打破php生态下的一些常规方式；
                    不支持协程业务复杂后会进入回调地狱

22、动态语言与静态语言
   语言各有各的好处，类型动态化是一把双刃剑，好处是灵活、表现力强、开发效率高，坏处是类型不安全，扩展、维护、性能都不及静态化语言
   JAVA因为是静态语言，所有的数据在运行前都需要明确类型，所以它的设计模式常常是比较繁琐的，需要申明接口、动态代理等；而像PHP则不必要
   这是静态语言不够灵活、表现力不强的问题，但是申明接口、编译是动态代理等的操作无疑又增强了类型的安全，在后期对项目的扩展、维护、性能都好
   而做为半编译性语言的JAVA在JIT和常驻内存的加持下要比PHP的性能好；编译+静态化能优化性能，非编译+静态化就谈不上性能优化了

23、lnmp、lamp、lnmpa一键安装包
   https://linuxeye.com/31.html
   https://github.com/oneinstack/lnmp

24、linux下强大的进程追踪命令strace
   https://www.cnblogs.com/machangwei-8/p/10388883.html

25、领域驱动设计
   软件由简单到复杂使用两顶帽子，
   一顶，既在不新加功能适时地对程序结构进行调整
   二顶，调整好了再新增迭代功能
   针对第二顶，代码如何以适应新的需求。使用领域驱动设计，用类去描绘模拟真实世界，面向对象开发

26、PHP CLI模式下的调试工具 zbacktrace
   https://blog.csdn.net/weixin_30878361/article/details/98802771
   下载php-src，解压后从根目录中找到一个.gdbinit文件，在gdb shell中输入
   gdb -p xxx      跟踪指定的进程
   source .gdbinit
   zbacktrace
   反复调用 ctrl + c 、zbacktrace、c 查看程序在哪段PHP代码发生循环
   就可以看到PHP代码的执行栈，还可以打断点等

27、微服务分布式事务
   选用事务补偿回滚会及时到具体的实现方式，服务编排和统筹
   服务不多编排还行，多了后还是统筹好

28、云原生
   产物就是微服务
   上云之后服务的扩展、可用、健壮性都有很大的提高
   屏蔽了环境对服务的影响
   服务随时可以中断、更新，内存体量小、性能高
  
29、YII组件
   将一个类以行为（继承了CBehavior类）的方式绑定（behaviors方法）给一个组件（继承了CComponent类），
       这样就无须改变继承关系而增强一个已有的组件类功能
   然后让行为响应对应组件的事件触发（重写events方法），这样不管该对象有多少行为都会随着事件的触发而一一执行
   行为类同Traits
   在一个类（继承了CComponent类）中申明一个不存在的属性，便向这个类注册了事件

30、Serverless
   自建机房时代，服务器没法自动扩容（买的物理机全是自己的，用不了不能退，流量多又必须买，大大损失钱财）
   虚拟机时代，CUP、内存、带宽等没法自动扩容（不用自建，1年买多大的服务器就是多大，但如果遇到又11这种场景就完了）
   云计算时代，物理硬件可随时扩容（随时应对双11，过后可以缩容，但应对某个业务突如其来的流量时就没法了）
   serverless，完全不用考虑服务器的事情，集中注意力实现自己的业务逻辑就好（把业务抽象成函数，随时增加函数来应对某个业务的流量）

31、领域驱动设计
 系统的设计以面向对象的方式进行，当拿到需求后，首先进行用例模型设计，分析整个系统要实现哪些功能；然后进行领域模型的设计，识别出系统中的实体、属性和关系，可以采用类图的形式，每个类通过它的属性来描述数据结构，通过类方法来描述对数据结构的操作。领域模型设计好之后，最后才是进行数据库的设计，此时，数据库设计就弱化成领域对象的一种持久化方式而已，实际的业务逻辑都封装在领域对象中，如果需要的话，可以将持久化实现为插件式方案，既可以使用 MySQL 来存储，也可以使用 MongoDB 来存储，但无论采用何种存储，领域对象都是不变的。这种既包含数据，也包含数据对应的业务逻辑的类设计方式就被称为充血模型（Rich Domain Model），它满足面向对象的封装特性，是典型的面向对象编程风格。
https://xie.infoq.cn/article/4ce5e446c9600661b1b5f6127
