https://blog.csdn.net/weixin_40533111/article/details/85069536

单体架构，数据库事物通过ACID操作不会出问题 
ACID：原子性(Atomicity )、一致性( Consistency )、隔离性或独立性( Isolation)和持久性(Durabilily)
隔离性：
? 同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰
（比如mysql有4种隔离级别，读未提交、不可重复读、可重复读、串行化，分别用来处理并发出现的脏读、不可重复读、幻读）

分布式时就不行了，需要cap理论
一致性:客户端知道操作是一致的（既a服务器操作了，访问b服务器时是一致的）
可用性:当服务器因为网络或宕机时，系统还可以正常使用 （既a服务器宕机后，客户访问能得到预期结果）
分区容忍性: 即使出现单个组件无法可用,操作依然可以完成（只要是分布式架构就是分区容忍性的）

BASE理论： 我们无法做到强一致，但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性

解决方法：
维护本地消息表（采用最多的方式）：
? 分布式事务就是跨多个系统的事务,可以拆分为多个子系统的本地事务;
分布式事务=A系统本地事务 + B系统本地事务 + 消息通知;
两阶段提交协议(2PC)：
? 1）第一阶段：准备阶段（prepare）
协调者通知参与者准备提交订单，参与者开始投票。
协调者完成准备工作向协调者回应Yes。
? 2）第二阶段：提交(commit)/回滚(rollback)阶段
协调者根据参与者的投票结果发起最终的提交指令。
如果有参与者没有准备好则发起回滚指令。
TCC事务补偿机制：大致方式是增加一张日志表，把整个分布式的操作写进去，然后用一个进程定时检测
                             如果事物超时就对其进行补偿，失败就回滚