分层：osi7层? tcp/ip4层；每个层只有相同层通信，底层提供对高层的服务；
          OSI只是参考模型，而TCP／IP是目前实际使用的一个协议族
拓扑结构：主要是星形和总线形结构

数据链路层：点对点、广播信道
点对点信道：通过帧链路的直接传过去
? 帧：左右帧定界定符+数据
? 三个基本问题：封装帧（检查帧定符），透明传输，差错检测
mac层：适配器根据检查mac帧数据的地址与自己匹配，从而接收该帧数据。所以帧包括目标地址、源地址、类型、数据、检测算法

网络层
虚拟互联：分配不固定的ip地址，在网络层使用，达到计算机互联，屏蔽了物理的复杂性
网际ip协议：ip地址和一些编码协议
路由器：网路通信的中间层
ip地址与物理地址：路由器有两ip地址和两物理地址，每一次中转帧的mac地址变化，ip地址不变，直到找到目标，这里会用到arp ip地址转mac地址工具

传输层
提供网络进程间通信服务
端口：通过端口找到通信进程，在网络层封装上来
udp:无连接协议
tcp:面向连接的协议
? 停止等待协议：等待服务端确认后再传输
? arq协议：滑动窗口
? 流量控制也是使用滑动窗口
? 连接管理：3次握手会话

应用层
http,DNS,p2p等协议
套接字：应用编程调用操作系统接口，省去应用协议，形成网络编程
? TCP,udp协议软件是驻留在操作系统中的

补：
1、网络层采用无连接方式，与电话的有连接不同，它更智能，更能使用于不同的异构网络
2、链路层是局域网里两个节点的链路；网卡和网卡的驱动程序（对比CUP与操作系统）
3、网路不想电话是面向连接的，面向连接是建立链接后去产生虚拟路线，可靠传输、纠正等的保证是虚拟路线，而网络是用户
4、LVS是四层网络模型（负载的去改变每个层传输的数据），nginx是七层，可以使用网络编程实现
5、链路层就是网卡，它的地址mac，这层必须mac进行通信（网络的多样的，不仅只有tcp/ip，比如有虚电路），所以需要arp进行mac到ip的转换
6、网卡要得到目的地mac地址，需要包装帧向如dhcp、arp、dns去询问相关地址，然后封装成具有四层模型的mac帧向网关路由器发出去
     之后网关路由器拿到数据帧后进行拆开，改写里面的发起地址，端口等，并记录，向网络中发出。最后收到数据帧后再转回来发给网卡
7、交换机映射MAC地址到端口，左边交换机映射右边的MAC全为同一个端口，反之右边交换机映射左边的MAC全为同一个端口
8、当交换机需求的映射有上千万时，路由器作为一台独立的拥有 MAC 地址的设备，并且可以把数据包做一次转发，因为不同产家的MAC不统一
     所以发明IP，如将 IP 地址为 192.168.0 开头的全部发送给到路由器
9、子网掩码是为了让处在同/不同子网下的发送方与接收方数据交互，将源 IP 与目的 IP 分别同这个子网掩码进行与运算，相等则是在一个子网，
    不相等就是在不同子网
10、所以交换机在链路层，路由器、子网掩码、arp在网络层
11、TCP是面向连接的协议，可以进行包的切割，所以是字节流的；UDP是无连接的，只要发送方知道接收方的IP、端口就可以发送，所以是数据包的
       即A发送消息a给C，B发送消息b给C，包的接收必须是发几次就接收几次，如果像TCP可以一次接收a、b消息，就乱了

