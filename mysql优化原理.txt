    构架模型：第一层客户端，非mysql所有，包括连接处理、授权、安全等
                    第二层mysql服务，查询解析、分析、优化、缓存、内置函数、存储过程、视图、触发器等
                    第三层存储引擎，数据存储、提取，与linux底层文件类似，使用API与服务层通信
    索引原理：
           （索引是在引擎层实现的）
           二叉数的查找性能好，左子数比根小，右子数比根大
           但是二叉数是可以自由的构建的，很容易会变成一个顺序查找的树
           引入平衡二叉数AVL，这样可以完全提供二叉数的性能
           但AVL要保持平衡性会付出很的代价，比如上百万阶级的树，对插入一个值需要的左右旋会很消耗IO
           引入B+tree树（多路搜索树），叶子节点存值，非叶子节点只存引用，所有值是按键值大小顺序存放
           B+tree利用磁盘预加载页的倍数，设置一个节点等一个页，每个节点只需1次IO可以完全载入
           索引也可能左右旋，但旋转次数少（当叶节点满后，它左右有节点未满时，不会去拆分页做磁盘操作，而是旋转到它左右节点上）
       补： 磁盘是读一次一个页，提高IO往往会多读页，mysql也是利用这个特性，一个页对应一个
           聚族索引是叶节点保存DATA，非聚族是叶节保存聚族索引，所以如果一个3阶索引树聚族索引需要3次IO，非聚族需要6次IO
           聚族索引是磁盘顺序读方式，非聚族是随机读（碰头不断移动，读取慢）
           因为非聚族索引存的数据通常比聚族的多，所以有时非聚族索引会更快，因为不再走聚族查询了
           中文的索引KEY应该是直接将所有字符看作二进制串，然后从最高位往最低位比对
           索性覆盖就不用回表了，所以性能非常好（查询数据大于全表20-30%，索引就无意义了）
           myisam只支持非聚族索引（data存数据的指针，先找到指针地址再通过内存地址找到值），innodb非/聚族索引（data存数据值，内存地址找值）
           InnoDB存储引擎的最小存储单元是页，页可以用于存放数据也可以用于存放键值+指针，在B+树中叶子节点存放数据，非叶子节点存放键值+指针

     优化：
           count()，指定列会不统计null值的，要计算查询行用count(*)
           join，本质是一个嵌套查询，所以只需要在第二个join表建索引即可
           limit，表数据很多时，尽可能覆盖索引查找，如id>10000 limit 10，而不是limit 10000, 10
           not null，需要使用到索引的列不要设置null
           左值原则，索引的存储就是如姓名存储，即先根据姓顺序存再根据名，使用函数、区间查询也是一样，优化器不能识别
           select少列，客户端必须接收完服务器的数据传输才能断开
           查询缓存，now()、curent_date（）这种实时是不能缓存的；语句只要有一个空格不同都不能命中缓存
           字段类型越简单越好
           UNSIGED可以使正数的上线提高一倍
           schema的列不要太多，行缓冲编码过的列转换成行数据的代价高
