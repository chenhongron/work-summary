C          ：众语言中最底的，很多语言都是基于它实现的，是唯一个有操作系统标准支持的；集大成者什么都可以做
C++     ：C语言的升级，最明显的就是增加了面向对象编程，没有解决C的指针问题；也是集大成者什么都可以做
Rust     ：不支持面向对象编程、多进程、多线程、与C++处在同一底层水平，不同的是有很一些自创的底层概念、生态弱
JAVA    ：面向对象编程、解决C的指针问题、多进程、多线程、异步IO；语言层面不支持协程；生态最强大，但编码有点繁琐
Python ：面向对象编程、多进程、多线程（实际不可用，不能发挥多核性能）、异步IO；语言层面不支持协程；生态强大，可以做AI等，编码简洁
GO       ：不支持面向对象编程、多进程、多线程（实际不可用，内核线程只有运行时才能用）、异步IO；刚内置协程式编程；生态强，编码简洁，编译型语言
PHP      ：面向对象编程、多进程、多线程（实际不可用，sapi可以有但不建议用）、异步IO（扩展支持）；语言层面不支持协程；生态强大，编码快速
Nodejs  ：面向对象编程、多进程、多线程（实际不可用，只是运行时线程）；主打异步IO；语言层面不支持协程；生态强，编码简洁

一句话概括：
   C主打系统底层编程
   C++主打系统底层+面向对象编程
   Rust主打系统底层+安全编程
   GO主打协程式编程
   JAVA主打服务端系统级编程
   Python主打简洁的算法AI编程
   PHP主打WEB快速编程
   Nodejs主打IO异步编程

  接近底层随之递减

补：
  1、nodejs的运行流程：
  1）、Client 请求到达 node api，该请求被添加到Event Queue（事件队列）。这是因为Node.js 无法同时处理多个请求。
  2）、Event Loop（事件循环） 始终检查 Event Queue 中是否有待处理事件，如果有就从 Event Queue 中从前到后依次取出，然后提供服务。
  3）、Event Loop 是单线程非阻塞I/O，它会把请求发送给 C++ Thread Pool(线程池)去处理，底层是基于C++ Libuv 异步I/O模型结构可以支持高并发。
       一个单线程的异步非阻塞事件循环
  4）、现在 C++ Thread Pool有大量的请求，如数据库请求，文件请求等。
       把任务丢给底层的C处理（C开多进程或多线程处理，这里就会用到child_process或worker_threads模块）
  5）、任何线程完成任务时，Callback（回调函数）就会被触发，并将响应发送给 Event Loop。
       完成时调用回调函数（即你写的代码）
  6）、最终 Event Loop 会将请求返回给 Client。  

  nodejs线程跟java的多线程有所不同， 它是读取一个脚本， 并由引擎去开启一个新的线程执行这个脚本， 并且不共享任何变量。
  这就相当于所有的线程的变量都是threadlocal的，多线程之间通过event来通信。并不是真正的多线程语言
  所以nodejs即不支持多进程编程也不支持多线程编程，但可以使用多进线程来提高CUP使用率

  2、计算机科学设计语言要素
   1）、基础的数值。比如整数，字符串，布尔值等
   2）、表达式。包括基本的算术表达式，嵌套的表达式
   3）、变量和赋值语句
   4）、分支语句
   5）、函数和函数调用

  3、PHP协程（swoole）
    实现也是需要事件循环，只是在底层对zendvm的帧栈、字接码、寄存器的操作，当有事件后再切回保存的寄存器帧栈
